// Khai b√°o c√°c th√¥ng tin c·∫•u h√¨nh Blynk
#define BLYNK_TEMPLATE_ID "TMPL6Mo5yu5Tc"                   // Acc s·ªë 2
#define BLYNK_TEMPLATE_NAME "DA1"
#define BLYNK_AUTH_TOKEN "OdtkQmi-9SbVU7paNmk5yQbboS-tMvLq"

// Khai b√°o th∆∞ vi·ªán
#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <Adafruit_SSD1306.h>

char auth[] = BLYNK_AUTH_TOKEN;
char ssid[] = "ng.hoangphat";
char pass[] = "1234567890";

// ƒê·ªãnh nghƒ©a ch√¢n v√† h·∫±ng s·ªë
#define TANK_LED 14      // Led b·ªìn
#define WIFI_LED 2       // Led wifi
#define PUMP_LED 17      // Led c·ªßa vi·ªác b∆°m th·ªß c√¥ng
#define TRIG_PIN 27      // Ch√¢n Trig c·ªßa HY-SRF05
#define ECHO_PIN 25      // Ch√¢n Echo c·ªßa HY-SRF05
#define PUMP_PIN 15      // Ch√¢n In c·ªßa Relay    
#define BUTTON_PIN 16    // N√∫t nh·∫•n m√°y b∆°m th·ªß c√¥ng

// Khai b√°o th√¥ng s·ªë hi·ªÉn th·ªã OLED
#define SCREEN_WIDTH 128      // K√≠ch th∆∞·ªõc m√†n h√¨nh OLED: 128x64 pixel
#define SCREEN_HEIGHT 64
#define OLED_RESET -1         // Kh√¥ng d√πng ch√¢n reset ri√™ng cho m√†n h√¨nh

// Khai b√°o ng∆∞·ª°ng c·ªßa m·ª±c n∆∞·ªõc
#define emptyTankDistance 24  // Kho·∫£ng c√°ch t·ª´ c·∫£m bi·∫øn ƒë·∫øn m·∫∑t n∆∞·ªõc khi b·ªìn r·ªóng (m·ª±c n∆∞·ªõc th·∫•p nh·∫•t)
#define fullTankDistance 5    // Kho·∫£ng c√°ch t·ª´ c·∫£m bi·∫øn ƒë·∫øn m·∫∑t n∆∞·ªõc khi b·ªìn ƒë·∫ßy  (m·ª±c n∆∞·ªõc cao nh·∫•t)                                    
#define TANK_AREA 240         // Di·ªán t√≠ch ƒë√°y b·ªìn

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Bi·∫øn to√†n c·ª•c
float duration, distance, waterVolume, waterHeight;   // Th·ªùi gian, kho·∫£ng c√°ch, th·ªÉ t√≠ch, m·ª±c n∆∞·ªõc c·ªßa t√≠n hi·ªáu si√™u √¢m
int waterLevelPer;                                    // % m·ª±c n∆∞·ªõc trong b·ªìn
bool pumpState = false;                               // Bi·∫øn tr·∫°ng th√°i m√°y b∆°m
bool ledState = false;                                // Bi·∫øn tr·∫°ng th√°i led b√°o hi·ªáu m·ª±c n∆∞·ªõc
bool manualPumpControl = false;                       // Bi·∫øn ƒëi·ªÅu khi·ªÉn b∆°m th·ªß c√¥ng
bool previousWiFiStatus = false;                      // L∆∞u tr·∫°ng th√°i WiFi ·ªü l·∫ßn ki·ªÉm tra tr∆∞·ªõc (false = ch∆∞a k·∫øt n·ªëi, true = ƒë√£ k·∫øt n·ªëi)

int timecho = 500;
unsigned long hientai = 0;
unsigned long thoigian;

void setup() {
  Serial.begin(115200);

  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(WIFI_LED, OUTPUT);
  pinMode(TANK_LED, OUTPUT);
  pinMode(PUMP_LED, OUTPUT);
  pinMode(PUMP_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);      // D√πng ƒëi·ªán tr·ªü k√©o l√™n n·ªôi b·ªô

  digitalWrite(WIFI_LED, LOW);
  digitalWrite(TANK_LED, LOW);
  digitalWrite(PUMP_LED, LOW);
  digitalWrite(PUMP_PIN, LOW);

  Blynk.begin(auth, ssid, pass);

  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("‚ùå Kh·ªüi ƒë·ªông m√†n h√¨nh SSD1306 kh√¥ng th√†nh c√¥ng"));
    for(;;);
  }

  display.setTextSize(1);       // K√≠ch th∆∞·ªõc ch·ªØ: 1 (nh·ªè nh·∫•t)
  display.setTextColor(WHITE);  // M√†u ch·ªØ: Tr·∫Øng
  display.clearDisplay();       // X√≥a to√†n b·ªô n·ªôi dung ƒëang hi·ªÉn th·ªã
}

void loop() {
  Blynk.run();
  checkWiFiConnection();  // Ki·ªÉm tra k·∫øt n·ªëi Wi-Fi
  buttonCheck();          // H√†m ki·ªÉm tra n√∫t nh·∫•n th·ªß c√¥ng

  thoigian = millis();
  if(thoigian - hientai >= timecho) {
    hientai = millis();
    measureDistance();      // H√†m ƒëo kho·∫£ng c√°ch
  }

  handleDistance();

  // G·ª≠i d·ªØ li·ªáu ƒë·∫øn c√°c ch√¢n ·∫£o (Virtual Pins) tr√™n ·ª©ng d·ª•ng Blynk
  Blynk.virtualWrite(V1, waterLevelPer);
  Blynk.virtualWrite(V2, String(waterHeight) + " cm");
  Blynk.virtualWrite(V3, String(waterVolume) + " L");
  Blynk.virtualWrite(V4, pumpState);
  Blynk.virtualWrite(V5, ledState);
  Blynk.virtualWrite(V6, waterHeight);
  Blynk.virtualWrite(V7, manualPumpControl);

  display.clearDisplay();   // X√≥a to√†n b·ªô n·ªôi dung tr√™n m√†n h√¨nh OLED
  drawWaterLevelScreen();   // H√†m v·∫Ω th√¥ng tin m·ªõi l√™n m√†n h√¨nh OLED
  display.display();        // Hi·ªÉn th·ªã n·ªôi dung ƒë√£ v·∫Ω
}

void checkWiFiConnection() {
  bool currentWiFiStatus = (WiFi.status() == WL_CONNECTED);

  if (currentWiFiStatus != previousWiFiStatus) {
    if (currentWiFiStatus) {
      digitalWrite(WIFI_LED, HIGH);
      Serial.println("‚úÖ ƒê√£ k·∫øt n·ªëi WiFi!");
    } else {
      digitalWrite(WIFI_LED, LOW);
      Serial.println("‚ùå M·∫•t k·∫øt n·ªëi WiFi!");
    }
    previousWiFiStatus = currentWiFiStatus;
  }
}

// H√†m x·ª≠ l√Ω s·ª± ki·ªán n√∫t nh·∫•n (b·∫≠t/t·∫Øt m√°y b∆°m th·ªß c√¥ng)
void buttonCheck() {
  int buttonState = digitalRead(BUTTON_PIN); // ƒê·ªçc tr·∫°ng th√°i n√∫t

  if (buttonState == LOW) { // N√∫t ƒë∆∞·ª£c nh·∫•n (v√¨ INPUT_PULLUP ‚Üí LOW khi nh·∫•n)
    if (waterLevelPer > 10 && waterLevelPer < 100) {
      manualPumpControl = true;
      pumpState = !pumpState;
    }

  delay(10); // Tr√°nh nhi·ªÖu n√∫t nh·∫•n
  }
}

void measureDistance() {
  digitalWrite(TRIG_PIN, LOW);
  delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH);
  delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);

  duration = pulseIn(ECHO_PIN, HIGH);
  distance = ((duration / 2) * 0.343) / 10;  // Kho·∫£ng c√°ch t·ª´ c·∫£m bi·∫øn ƒë·∫øn v·∫≠t c·∫£n
}

void handleDistance() {
  if (duration > 0 && distance >= fullTankDistance && distance <= emptyTankDistance) {
    waterLevelPer = map((int)distance, emptyTankDistance, fullTankDistance, 0, 100);
    waterLevelPer = constrain(waterLevelPer, 0, 100);
    waterHeight = constrain(emptyTankDistance - distance, 0, 19);
    waterVolume = constrain((TANK_AREA * waterHeight) / 1000.0, 0, 4.56);

    if (waterLevelPer < 10 || waterLevelPer == 100) {
      digitalWrite(TANK_LED, HIGH);
      ledState = true;
    }
    else {
      digitalWrite(TANK_LED, LOW);
      ledState = false;
    }

    if (!manualPumpControl) {                   // Ki·ªÉm tra tr·∫°ng th√°i n√∫t nh·∫•n th·ªß c√¥ng (n·∫øu kh√¥ng c√≥ nh·∫•n th√¨ th·ª±c hi·ªán c√¥ng vi·ªác ph√≠a d∆∞·ªõi)
      if (waterLevelPer < 10) {
        digitalWrite(PUMP_PIN, HIGH);
        pumpState = true;
        digitalWrite(PUMP_LED, HIGH);
        Serial.println("üî¥ M·ª±c n∆∞·ªõc xu·ªëng th·∫•p!");
        Serial.println("B∆°m: ON (‚öôÔ∏è T·ª± ƒë·ªông)");
      }
      else if (waterLevelPer == 100) {
        digitalWrite(PUMP_PIN, LOW);
        pumpState = false;
        digitalWrite(PUMP_LED, LOW);
        Serial.println("üü¢ M·ª±c n∆∞·ªõc ƒë·∫°t m·ª©c cao nh·∫•t!");
        Serial.println("B∆°m: OFF (‚öôÔ∏è T·ª± ƒë·ªông)");
      } 
      manualPumpControl = false;              // G√°n bi·∫øn n√∫t nh·∫•n b∆°m th·ªß c√¥ng tr·ªü v·ªÅ m·ª©c 0
    }
    else {
      digitalWrite(PUMP_PIN, pumpState ? HIGH : LOW);
      if (pumpState == true) {
        digitalWrite(PUMP_LED, HIGH);
        Serial.println("B∆°m: ON (üõ†Ô∏è Th·ªß c√¥ng)");
      }
      else {
        digitalWrite(PUMP_LED, LOW);
        Serial.println("B∆°m: OFF (üõ†Ô∏è Th·ªß c√¥ng)");
      }
    }
  }
  else {
    /*waterLevelPer = 0;
    waterHeight = 0.0;
    waterVolume = 0.0;*/
    digitalWrite(PUMP_PIN, LOW);
    digitalWrite(TANK_LED, LOW);
    digitalWrite(PUMP_LED, LOW);
    pumpState = false;
    ledState = false;
    manualPumpControl = false;
  }
}

void drawWaterLevelScreen() {
  
  display.setTextSize(1);
  display.setCursor(0, 0);
  display.print("Muc nuoc:");
  display.setTextSize(2);
  display.setCursor(0, 10);
  display.print(waterHeight, 1);
  display.print(" cm");

  display.setTextSize(1);
  display.setCursor(0, 30);
  display.print("The tich:");
  display.setTextSize(2);
  display.setCursor(0, 40);
  display.print(waterVolume, 1);
  display.print(" L");

  int rectX = 85, rectY = 16, rectWidth = 40, rectHeight = 40;
  display.drawRect(rectX, rectY, rectWidth, rectHeight, WHITE);

  int waterHeightRect = map(waterLevelPer, 0, 100, 0, rectHeight - 4);
  int waterTopY = rectY + rectHeight - 2 - waterHeightRect;
  display.fillRect(rectX + 2, waterTopY, rectWidth - 4, waterHeightRect, WHITE);
}
